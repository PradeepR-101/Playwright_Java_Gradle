//buildscript {
//	ext {
//		springBootVersion = '2.7.2'
//		springCloudVersion = '2021.0.1'
//		springDependencyManagementVersion = '1.0.11.RELEASE'
//		tfsLoggingStarter = 'o.7.3-SNAPSHOT'
//		gitPropertiesVersion = '2.4.0'
//		gradleWrapperVersion = '7.4.2'
////		springfoxVersion = '3.0.0'
//		spockVersion = '2.1-groovy-3.0'
//	}
//	repositories {
//		mavenCentral()
//		maven { url 'JFrog specific repo url'}
//		maven { url 'JFrog specific repo url'}
//	}
//}



plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'io.qameta.allure' version '2.8.1'
	id 'com.jfrog.artifactory' version '4.29.0'
	id 'jacoco'
}

//if we want to publish jar
//group = 'com.company.apppageobjects'
//version = '0.0.2-SNAPSHOT'

group = 'com.company'
version = '0.0.1-SNAPSHOT'

//java {
//	sourceCompatibility = '17'
//}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

//bootJar {
//	enabled = false
//}
//
//jar {
//	enabled = true
//	archiveClassifier = ''
//}

//configurations {
//	compileOnly {
//		extendsFrom annotationProcessor
//	}
//	testCompile
//}


repositories {
	mavenCentral()
//	maven { url 'https://na-kd.js.company.net/artifactory/tfcom-maven-internal'}
//	maven { url 'https://na-kd.js.company.net/artifactory/techops-maven-internal'}
}

//to access jfrog private repo libraries in local not required for remote bcz we can set this in github settings secretes and those are mapping in pipeline.yml file
//repositories {
//	def artifactoryUrl = 'https://na-kd.js.company.net/artifactory/'
//	def repositories = ['tfcom-maven-internal','techops-maven-internal']
//
//	repositories.each { repo ->
//		maven {
//			url "${artifactoryUrl}${repo}/"
//			credentials {
//				//log user and password from environment variables
//				username = System.getenv("ARTIFACTORY_USER") ?: project.findProperty("artifactory_user")
//				password = System.getenv("ARTIFACTORY_PASSWORD") ?: project.findProperty("artifactory_password")
//			}
//		}
//	}
//}

//publishing {
//	publications {
//		mavenJava(MavenPublication){
//			from components.java
//			SuppressAllPomMetadataWarnings()
//		}
//	}
//}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	// https://mvnrepository.com/artifact/com.microsoft.playwright/playwright
	implementation group: 'com.microsoft.playwright', name: 'playwright', version: '1.45.0'
	// https://mvnrepository.com/artifact/org.testng/testng
	testImplementation group: 'org.testng', name: 'testng', version: '7.10.2'
	// https://mvnrepository.com/artifact/io.qameta.allure/allure-testng
	implementation group: 'io.qameta.allure', name: 'allure-testng', version: '2.28.0'

	//custom jar
	//implementation group: 'com.company.apppageobjects', name: 'apppageobjects', version: '0.0.2-SNAPSHOT'



}

//allure {
//	autoconfigure = true
//	version = '2.11.0'
//	autoconfigure = true
//	aspectjweaver = true
//	//resultsDir = File("${buildDir}"+'\\allure-results')
//	//allureJavaVersion = LATEST_VERSION
//}

//tasks.withType(GenerateModuleMetadata){
//	enabled = false
//}

tasks.named('test') {
//	useJUnitPlatform()
	useTestNG()
}
